unit HWInterfaceDef;
{Last mod: 2014-11-13 MVac}
{
In this unit there should be list of declaration, which will be satisfied/defied 
by including other corresponding units writteln for specific HW combination, for which
the actual compilation should work.
All the function prototypes are expected to rpovide basic high level access to the functions
of the hw.
From the gerneral point of devices, there is to be expected these cateories:  
- Potenciostat/electronic load control
- Gas flow control
- Temperature/heaters monitoring and control
}

{$IFDEF FPC}  //for compatibility between delphi  and lazarus
{$MODE Delphi}
{$ENDIF}


interface

//***************************************
//!!!!!!!!!!!!!!!!!!!!!!!!!
//******  HOwto use: call to MainInterface
//which should be defined in the main application
//as instance of TCommonInterface class
//
//***************************************


uses
  {LCLIntf, LCLType, LMessages, Messages,} SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls {,SdpoSerial ;}{, SynAser},
  HWAbstractDevices;



type 
  tError = record
    ErrorCode: integer;
    ErrorString: string;
  end;



type
   TCommResult = ( CCommOK, CCommError, CCommNotConnected, CCommNotImplemented);


type
  TPressureDevices = ( CpAnode, CpCathode, CpBPControl,
                       CpFlowH2, CpFlowN2, CpFlowO2, CpFlowCO);
  TFlowDevices = ( CFlowH2, CFlowO2, CFlowN2, CFlowCO);
  TValveDevices = ( CVanodeInH2, CVanodeInN2, CVcathodeInO2, CVcathodeInN2, CVcathodeInAir,
                     CVanodeBypass, CVcathodeBypass,
                     CVCOdump, CVCObleed,
                     CVN2dump, CVN2toAnode, CVN2toCathode,
                     CVH2toAnode, CVH2toCathode,
                     CVO2toAnode, CVO2toCathode,
                     CVoutAnodeToH2, CVoutCathodeToO2 );
  TTempDevices  = ( CTbubH2, CTlineH2, CTbubO2, CTlineO2, CTbubN2, CTlineN2,
                     CTcellBot, CTcellTop, CTRoom,
                     CTflowH2, CTflowO2, CTflowN2, CTflowCO);

  TPressureStats =  array [TPressureDevices] of TPressureRec;


  TFlowStats = array [TFlowDevices] of TFlowRec;
  TFlowArraySP = array [TFlowDevices] of double;

  TValveStats = array [TValveDevices] of TValveRec;
  TValveArraySP = array [TValveDevices] of boolean;

  TTempStats = array [TTempDevices] of TTempRec;
  TTempHeaterSP = array [TTempDevices] of double;

  TValveCathodeGas = (CGasCathodeO2, CGasCathodeAir, CGasCathodeN2);
  TValveAnodeGas = (CGasAnodeH2, CGasAnodeN2);

   //
   //hw devices stats structures - see "hwabstractdevices"
   //
   {
   TPotentioRec, TPotentioStatus, ...
   }


type
  TCommonInterfaceObject = class
  public
    //function LastCommResultOK: boolean;
    //procedure SetDebugLvl(dlvl: byte);
    function Info: AnsiString;
    function InitAll: boolean;  //IMPORTANT TO CALL - creates & ini  all necessary modules
    procedure TerminateAll;     //when closing application...
    //function LastResult: TCommResult;
    function LastResStr: string;
    procedure PotentioAssign( dev: TPotentiostatObject );
    function PotentioIsReady: boolean;
    function PotentioRead: boolean;
    function PotentioSetCC( val: double): boolean;
    function PotentioSetCV( val: double): boolean;
    function PotentioTurnON: boolean;
    function PotentioTurnOFF: boolean;
    procedure PressureAssign( dev: TPressureCtrlObject );
    procedure PressureRead;
    procedure PressureSet( which: TPressureDevices; val: double);
    procedure PressureInit;
    procedure FlowRead;
    procedure FlowSet( which: TFlowDevices; val: double);
    procedure FlowInit;
    procedure ValveUpdate;
    Procedure ValveOpen( which: TValveDevices);
    Procedure ValveClose( which: TValveDevices);
    //Procedure ValveForceState( which: TValveDevices; state: boolean); {will not check rules = dangerous!!}
    Procedure ValveCloseAll;
    Procedure ValveSetCathode( which: TValveCathodeGas);
    Procedure ValveSetAnode( which: TValveAnodeGas);
    //... and others
    procedure ValveInit;
    procedure TempRead;
    procedure TempSet( which: TTempDevices; val: double);
    procedure TempInit;
    procedure ReadEverything;
  public
    //use these to access all values and status
    PotentioData: TPotentioRec;
    PotentioStatus: TPotentioStatus;
    PressureStats: TPressureStats;
    FlowStats: TFlowStats;
    ValveStats: TValveStats;
    TempStats: TTempStats;
    //connection status (after call "check" function
  private
    //!!! which module for potentio is used, is selected through function  PotentioAssign from hardware control form
    MyPotentio: TPotentiostatObject;

    ValveInternalState:  TValveArraySP;
    //LastRes: TCommResult;
    LastResMsg: string;
    //FlowLastSP: TFLowArray;
  private
    procedure ValveCheckRules;
  end;





procedure GetSerialPortsOnSystem(var Strings: TStrings);
{return list of strings contanining available com portr device on system
maybe works OK only on Windows}







implementation




//{$Include Potentio_KolPTC.pas}
//{$Include FlowCtrl_dummy.pas}
//{$Include ValveCtrl_dummy.pas}
//{$Include TempCtrl_dummy.pas}
//{$Include PressureCtrl_dummy.pas}

//Uses kolPTCinterface{, FlowCtrlDummy, ValveCtrlDummy, TempCtrlDummy};


//procedure TCommonInterfaceObject.SetDebug(b: boolean);
//begin
// BKdebug := b;
//end;

{
function InitAll: boolean;
    procedure TerminateAll;
    function LastResult: TCommResult;
    procedure PotentioAssign( dev: TPotentiostatObject );
    procedure PotentioCheckStatus;
    procedure PotentioRead;
    procedure PotentioSetCC( val: double);
    procedure PotentioSetCV( val: double);
    procedure PotentioTurnON;
    procedure PotentioTurnOFF;
}

function TCommonInterfaceObject.Info: AnsiString;
begin
  Result := 'Common interface: beta 2015-07-27 (MV)';
end;

function TCommonInterfaceObject.InitAll: boolean;
{init all communication modules!!! improtant}
Var
  r1, res: boolean;
  PotentioReady: boolean;
begin
  Result := false;
  PotentioReady := false;
  if MyPotentio=Nil then
    begin
      LastResMsg:= 'CommonI: PTC Not SET';
    end;
  if MyPotentio<>Nil then
    begin
     r1 := false;
     if MyPotentio.IsReady then
       r1 := MyPotentio.Initialize;
     PotentioReady := r1;
    end;
  //TODO:... other devices
  //
  res := PotentioReady;    //and Pressure and Flow and ...
  Result := res;
end;

Procedure TCommonInterfaceObject.TerminateAll;
{CLOSE all communication modules!!! improtant}
begin
  if MyPotentio<>Nil then
    begin
      MyPotentio.Finalize;
    end;
  //TODO:........ other devices
end;


//function TCommonInterfaceObject.LastResult: TCommResult;
//{0 = OK ... }
//begin
//  Result := CCommOK; //LastResCode;
//end;

function TCommonInterfaceObject.LastResStr: string;
begin
  Result := lastresmsg;
end;

procedure TCommonInterfaceObject.PotentioAssign( dev: TPotentiostatObject );
begin
  MyPotentio := dev;
end;

function TCommonInterfaceObject.PotentioIsReady: boolean;
begin
  Result := PotentioIsReady;
end;

function TCommonInterfaceObject.PotentioRead: boolean;
Var
  res: boolean;
begin
  Result := false;
  if MyPotentio=Nil then
    begin
      LastResMsg:= 'CommonI: PTC Not SET';
      exit;
    end;
  //aquire new data
  res := MyPotentio.GetDataStatus(PotentioData, PotentioStatus);
  if not res or PotentioStatus.isError then
    begin
     LastResMsg:= 'CommonI: error during reading potentio';
    end;
  LastResMsg:= 'Reading potentio OK.';
  Result := true;
end;



function TCommonInterfaceObject.PotentioSetCC( val: double): boolean;
begin
  Result := false;
  if MyPotentio=Nil then
    begin
      LastResMsg:= 'CommonI: PTC Not SET';
      exit;
    end;
  Result := MyPotentio.SetCC(val);
end;



function TCommonInterfaceObject.PotentioSetCV( val: double): boolean;
begin
  Result := false;
  if MyPotentio=Nil then
    begin
      LastResMsg:= 'CommonI: PTC Not SET';
      exit;
    end;
  Result := MyPotentio.SetCV(val);
end;


function TCommonInterfaceObject.PotentioTurnON: boolean;
begin
  Result := false;
  if MyPotentio=Nil then
    begin
      LastResMsg:= 'CommonI: PTC Not SET';
      exit;
    end;
  Result := MyPotentio.TurnLoadON;
end;


function TCommonInterfaceObject.PotentioTurnOFF: boolean;
begin
  Result := false;
  if MyPotentio=Nil then
    begin
      LastResMsg:= 'CommonI: PTC Not SET';
      exit;
    end;
  Result := MyPotentio.TurnLoadOFF;
end;

//  *********************
//  pressure
//

procedure  TCommonInterfaceObject.PressureAssign( dev: TPressureCtrlObject );
begin
  //nil
  ShowMessage('Function not implemented');
end;

procedure TCommonInterfaceObject.PressureRead;
begin
  ShowMessage('Function not implemented');
end;


procedure TCommonInterfaceObject.PressureSet( which: TPressureDevices; val: double);
begin
  ShowMessage('Function not implemented');
end;

procedure TCommonInterfaceObject.PressureInit;
begin
  ShowMessage('Function not implemented');
end;

procedure TCommonInterfaceObject.FlowRead;
begin
  ShowMessage('Function not implemented');
end;


procedure TCommonInterfaceObject.FlowSet( which: TFlowDevices; val: double);
begin
  ShowMessage('Function not implemented');
end;


procedure TCommonInterfaceObject.FlowInit;
begin
  ShowMessage('Function not implemented');
end;



procedure TCommonInterfaceObject.ValveUpdate;
begin
  ShowMessage('Function not implemented');
end;



Procedure TCommonInterfaceObject.ValveOpen( which: TValveDevices);
begin
  ShowMessage('Function not implemented');
end;



Procedure TCommonInterfaceObject.ValveClose( which: TValveDevices);
begin
  ShowMessage('Function not implemented');
end;



//Procedure TCommonInterfaceObject.ValveForceState( which: TValveDevices; state: boolean); {will not check rules = dangerous!!}



Procedure TCommonInterfaceObject.ValveCloseAll;
begin
  ShowMessage('Function not implemented');
end;



Procedure TCommonInterfaceObject.ValveSetCathode( which: TValveCathodeGas);
begin
  ShowMessage('Function not implemented');
end;



Procedure TCommonInterfaceObject.ValveSetAnode( which: TValveAnodeGas);
begin
  ShowMessage('Function not implemented');
end;

//... and others


procedure TCommonInterfaceObject.ValveInit;
begin
  ShowMessage('Function not implemented');
end;



procedure TCommonInterfaceObject.TempRead;
begin
  ShowMessage('Function not implemented');
end;



procedure TCommonInterfaceObject.TempSet( which: TTempDevices; val: double);
begin
  ShowMessage('Function not implemented');
end;



procedure TCommonInterfaceObject.TempInit;
begin
  ShowMessage('Function not implemented');
end;



procedure TCommonInterfaceObject.ReadEverything;
begin
  ShowMessage('Function not implemented');
end;


procedure TCommonInterfaceObject.ValveCheckRules;
begin
  ShowMessage('Function not implemented');
end;




//
//***************************
//

procedure GetSerialPortsOnSystem(var Strings: TStrings);
Var
  listcom: string;
  i: integer;
begin
{$IFDEF WINDOWS}
  listcom := GetSerialPortNames;  //comma separated list
  //
  // ExtractStrings

{$ENDIF}
end;









end.
